/**
 * 
 */
package com.crawljax.plugin.dommutation;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

import com.crawljax.browser.EmbeddedBrowser;
import org.apache.log4j.Logger;

import com.crawljax.core.CrawljaxException;
import com.crawljax.core.configuration.CrawljaxConfiguration;
import com.crawljax.core.plugin.DomMutationNotifierPlugin;
/**
 * @author arz
 *
 */
public class MutationNotiferNoProxy implements DomMutationNotifierPlugin {
	
	private static final Logger LOGGER = Logger.getLogger(MutationNotiferNoProxy.class.getName());
	public static String mutationSummary;
	public static String JavaScritpCode;
	

	
	public MutationNotiferNoProxy(CrawljaxConfiguration crawljaxConfiguration) {
		// TODO Auto-generated constructor stub
		
		// setting the boolean value to true to indicate that there is an instance of this plugin available in the configuration
				crawljaxConfiguration.getCrawlSpecification().setDomMutationNotifierPluginCheck(true);
				
				try {
					mutationSummary = readFileAsString("target/classes/mutation_summary.js");
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				
		StringBuffer jsElementContent =

		new StringBuffer(
				"\n\n console.log(\"inside javaScriopt injecting code: Saltlab\");");
		// Store value on browser for duration of the session

		jsElementContent
				.append("\n\n sessionStorage.setItem('domHasChanged', 'false');");
		jsElementContent.append("\n\n reportCounter = 0;");
		jsElementContent
				.append("\n\n var observer = new MutationSummary({ callback : handleChanges,\n queries : [{ all : true }]}); ");
		jsElementContent
				.append("\n\n function handleChanges(summaries) {\n	sessionStorage.setItem('domHasChanged', 'true');\n reportCounter++;\n console.log(\"domChangeReport\");\n } ");			
		
		JavaScritpCode = jsElementContent.toString();
				
	}

	/* (non-Javadoc)
	 * @see com.crawljax.core.plugin.DomMutationNotifierPlugin#hasDomMutated(com.crawljax.browser.EmbeddedBrowser)
	 */
	@Override
	public boolean hasDomMutated(EmbeddedBrowser browser) {
		
		
		LOGGER.warn("retrieving DOM mutation flag by executing JS ");
		
		boolean domHasChanged = true;
		String result = null;
		try {
			
			Object obj = browser.executeJavaScript(" return sessionStorage.getItem('domHasChanged');");
			browser.executeJavaScript("sessionStorage.setItem('domHasChanged', 'false');");
			
			if (obj!= null)
			{			
				result =  obj.toString();
			}
			else{
				
				LOGGER.warn("retrieving falg by executing JS returned null!! ");
				
				
			}
			
		} catch (CrawljaxException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		if (result !=null)
		{
			if (result.toLowerCase().equals("false"))
			{
				domHasChanged = false;
				LOGGER.warn("MutationPlugin: No mutation in DOM");
			}
			else
			{
				
				domHasChanged = true;
				LOGGER.warn("Dom has been mutated.");

			}
			
		}
		return domHasChanged;

	}
	
	  public static String readFileAsString(String filePath) throws java.io.IOException{
	        StringBuffer fileData = new StringBuffer(1000);
	        BufferedReader reader = new BufferedReader(
	                new FileReader(filePath));
	        char[] buf = new char[1024];
	        int numRead=0;
	        while((numRead=reader.read(buf)) != -1){
	            String readData = String.valueOf(buf, 0, numRead);
	            fileData.append(readData);
	            buf = new char[1024];
	        }
	        reader.close();
	        return fileData.toString();
	    }

}
